axis.POSIXct(1, as.POSIXct(g$date, origin="1970-01-01"))
g
as.POSIXct(g$date, origin="1970-01-01")
as.POSIXct(1, as.POSIXct(g$date, origin="1970-01-01"))
as.POSIXct(1, as.POSIXct(g$date, origin="1970-01-01"),origin="1970-01-01")
as.POSIXct(as.POSIXct(g$date, origin="1970-01-01"),origin="1970-01-01")
as.POSIXct(1, as.POSIXct(g$date, origin="1970-01-01"))
axis.POSIXlt(1, as.POSIXct(g$date, origin="1970-01-01"))
axis.date(1, as.POSIXct(g$date, origin="1970-01-01"))
plot(g$steps,g$date,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
plot(g$steps,g$date,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red",type='l')
plot(g$date,g$steps,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red",type='l')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='b')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='a')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='c')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='d')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='e')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='f')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='g')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='h')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='i')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='j')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='k')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='m')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='n')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='o')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='p')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='q')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='r')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='s')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='t')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='u')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='v')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='w')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='x')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='y')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='z')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='i')
plot(g$date,g$steps,main="Missing data",xlab="Date",ylab="Total steps",col="red",type='h')
g
hist(g1[,1],breaks=20,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
hist(g1[,1],breaks=200,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
g
barplot(as.vector(g$steps),as.vector(g$date),main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
ggplot(g1, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot2(g1, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
library(ggplot2)
ggplot(g1, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
names(g1)
names(g)
ggplot(g, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(g, aes(date, steps)) + geom_bar(stat = "identity", colour = "red", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(g, aes(date, steps)) + geom_histogram(stat = "identity", colour = "red", fill = "red", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
data <- read.csv("C:/Users/ANUBHAV/Downloads/repdata-data-activity/activity.csv", header=T, quote="\"",colClasses= c("numeric", "Date", "factor"))
data_noNA<-na.omit(data)
#g1<-as.data.frame(tapply(data_noNA$steps,data_noNA$date,FUN=sum))
#hist(g1[,1],breaks=20,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
g1<-aggregate(data_noNA$steps~data_noNA$date,data=data_noNA,FUN=sum)
names(g1)<-c("date","steps")
#barplot(as.vector(g$steps),as.vector(g$date),main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
ggplot(g, aes(date, steps)) + geom_histogram(stat = "identity", colour = "red", fill = "red", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
mean(g1[,1])
median(g1[,1])
data <- read.csv("C:/Users/ANUBHAV/Downloads/repdata-data-activity/activity.csv", header=T, quote="\"",colClasses= c("numeric", "Date", "factor"))
data_noNA<-na.omit(data)
#g1<-as.data.frame(tapply(data_noNA$steps,data_noNA$date,FUN=sum))
#hist(g1[,1],breaks=20,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
g1<-aggregate(data_noNA$steps~data_noNA$date,data=data_noNA,FUN=sum)
names(g1)<-c("date","steps")
#barplot(as.vector(g$steps),as.vector(g$date),main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
ggplot(g, aes(date, steps)) + geom_histogram(stat = "identity", colour = "red", fill = "red", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
mean(g1[,2])
median(g1[,2])
data <- read.csv("C:/Users/ANUBHAV/Downloads/repdata-data-activity/activity.csv", header=T, quote="\"",colClasses= c("numeric", "Date", "factor"))
data_noNA<-na.omit(data)
#g1<-as.data.frame(tapply(data_noNA$steps,data_noNA$date,FUN=sum))
#hist(g1[,1],breaks=20,main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
g1<-aggregate(data_noNA$steps~data_noNA$date,data=data_noNA,FUN=sum)
names(g1)<-c("date","steps")
#barplot(as.vector(g$steps),as.vector(g$date),main="Missing data",xlab="Total Number of Steps Taken Daily",ylab="Frequency(No. of days)",col="red")
ggplot(g, aes(date, steps)) + geom_histogram(stat = "identity", colour = "red", fill = "red", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
mean(g1$steps)
median(g1$steps)
g3<-aggregate(data_na$steps~data_na$date,data=data_na,FUN=sum)
g3
names(g3)
g3<-aggregate(data_na$steps~data_na$date,data=data_na,FUN=sum)
#g3<-as.data.frame(tapply(data_na$steps,data_na$date,FUN=sum))
names(g1)<-c("date","steps")
ggplot(g3, aes(date, steps)) + geom_histogram(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day(No missing values)", x = "Date", y = "Total number of steps")
g3<-aggregate(data_na$steps~data_na$date,data=data_na,FUN=sum)
#g3<-as.data.frame(tapply(data_na$steps,data_na$date,FUN=sum))
names(g3)<-c("date","steps")
ggplot(g3, aes(date, steps)) + geom_histogram(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day(No missing values)", x = "Date", y = "Total number of steps")
mean(g3$steps)
median(g3$steps)
newmean<-mean(g3$steps)
newmedian<-median(g3$steps)
newmean-mean(g1$steps)
newmedian-median(g1$steps)
```{r}
unzip("activity.zip")
options(scipen = 1)  # Turn off scientific notations for numbers
```
### Loading and processing the data
```{r}
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
getwd()
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
getwdd()
getwd()
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
data <- read.csv("C:/Users/ANUBHAV/Documents/activity.csv", colClasses = c("integer", "Date", "factor"))
getwd()
data <- read.csv(paste(getwd(),"/activity.csv",sep=""), colClasses = c("integer", "Date", "factor"))
paste(getwd(),"/activity.csv",sep="")
opts_knit$set(root.dir = 'C:/Users/ANUBHAV/Documents')
install.packages("root.dir")
library(knitr)
setwd(getwd())
library(knitr)
library(markdown)
knit("knitr-minimal.Rmd")
knit("C:/Users/ANUBHAV/Desktop/PA1_template.Rmd")
knit("C:/Users/ANUBHAV/Desktop/PA1_template.Rmd")
knit("C:/Users/ANUBHAV/Desktop/PA1_template.Rmd")
knit("C:/Users/ANUBHAV/Documents/PA1_template.md")
knit("C:/Users/ANUBHAV/Desktop/PA1_template.Rmd")
knit("C:/Users/ANUBHAV/Desktop/PA1_template.Rmd")
install.packages(httpuv)
install.packages("httpuv")
install.packages("catools")
install.packages("caTools")
knit("D:\DataScience\Git\RepData_PeerAssessment2\rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knitr("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
library(knitr)
knitr("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
dir()
getwd()
?unzip
unzip("repdata-data-StormData.csv.bz2",exdir=getwd())
unzip("repdata-data-StormData.csv.bz2")
unzip("repdata-data-StormData.csv.bz2")
getwd()
unzip("repdata-data-StormData.csv.bz2")
setwd("C:/Users/ANUBHAV/Desktop")
getwd()
unzip("repdata-data-StormData.csv.bz2")
setwd("C:/Users/ANUBHAV/Documents")
unzip("rankall.zip")
bzfile("repdata-data-StormData.csv.bz2")
bunzip2("repdata-data-StormData.csv.bz2", overwrite=T, remove=F)
library(R.utils)
install.packages("R.utils")
library(R.utils)
library(R.utils,silent=TRUE)
?library
library(R.utils,quitely=TRUE)
library(R.utils,quietly=TRUE)
bunzip2("repdata-data-StormData.csv.bz2", overwrite=T, remove=F)
if (!"repdata-data-StormData.csv" %in% dir()){print("Not here")} else {print("here")}
if (!"repdata-data-StormData.csv" %in% dir()){print("Not here")} else {print("here")}
if (!"repdata-data-StormData.csv" %in% dir())
{
bunzip2("repdata-data-StormData.csv.bz2", overwrite=T, remove=F)
}
data<-read.csv(file="repdata-data-StormData.csv",header=TRUE,stringsAsFactor=FALSE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
if (!"repdata-data-StormData.csv" %in% dir())
{
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile="repdata-data-StormData.csv.bz2")
bunzip2("repdata-data-StormData.csv.bz2", overwrite=T, remove=F)
}
basename(getwd())
if (!"repdata-data-StormData.csv" %in% dir())
{
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile="repdata-data-StormData.csv.bz2")
bunzip2("repdata-data-StormData.csv.bz2", overwrite=T, remove=F)
}
data<-read.csv(file="repdata-data-StormData.csv",header=TRUE,stringsAsFactor=FALSE)
getwd()
knit("D:\DataScience\Git\RepData_PeerAssessment2\rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
library(knitr)
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.rmd")
knit("D:/DataScience/Git/RepData_PeerAssessment2/rep_assignment2.md")
options(rpubs.upload.method = "internal")
ls()
rm(list=ls())
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
getwd()
options(rpubs.upload.method = “internal”)
options(rpubs.upload.method = "internal")
source('C:/Users/ANUBHAV/OneDrive/Documents/.RProfile')
library(grid)
data(mmtcars)
data(mtcars)
data
mtcars
head(mtcars)
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
library("lubridate", lib.loc="~/R/win-library/3.1")
install.packages("lubridate")
?lubridate
??lubridate
library("xlsx")
install.packages("xlsx")
data(mtcars)
head(mtcars)
data(diamonds)
data(diamond)
data(Nile)
head(Nile)
str(Nile)
data(euro)
head(euro)
library(ggplot2)
data(diamonds)
head(diamonds)
library(dplyr)
install.packages("stats")
head(diamonds)
?unique
ggplot(data=diamonds,aes(clarity,fill=cut))
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_bar()
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_histogram()
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_bar()
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_histogram()
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_bar()
ggplot(data=diamonds,aes(clarity,fill=cut)) + geom_line()
library(sqldf)
library(RODBC)
ch<-odbcConnect("datascience")
ch<-odbcConnect("datascience")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(dataset)
library(datasets)
?datasets
library(help="datasets")
data<-datasets(AirPassengers)
library(AirPassengers)
str(iris)
str(AirPassengers)
str(HairEyeColor)
head(HairEyeColor)
h<-HairEyeColor
h[1]
h[[1]]
?HairEyeColor
dim(h)
h[2,3,3]
h[2][3][3]
h[1][1][1]
h[2][3][1]
str(Titanic)
str(WorldPhones)
str(airquality)
?airquality
head(airquality)
a<-airquality
head(a)
library(dplyr)
?dplyr
unique(a,Month)
unique(a,"Month")
unique(a,"Day")
unique(Day,a)
Select(unique(a,Month))
select(unique(a,Month))
select(unique(a,"Month"))
select(unique.a("Month"))
distinct(a,Month)
distinct(a[Month],Month)
distinct(a[,Month],Month)
select(distinct(a,Month)$Month)
distinct(a,Month)$Month
library(ggplot2)
atest<-a[Month==5]
atest<-a["Month"==5]
head(atest)
a["Month"==5]
a["Month"=5]
a["Month"==5,]
a
str(a$Month)
a[a$Month==5,]
a[Month==5,]
a["Month"==5,]
atest<-a[a$Month==5,]
atest
ggplot(data=atest,aes(x=Day,y=Ozone)) + geom_bar(stat="identity")
ggplot(data=atest,aes(x=Day,y=Ozone)) + geom_line(stat="identity")
head(atest)
ggplot(data=atest,aes(x=Day,y=c(Ozone,Wind)) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=c(Ozone,Wind))) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=c(Ozone,Wind))) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=(Wind)) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=(Wind)) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=Wind) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=Wind) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=Wind)) + geom_line(stat="identity")
ggplot(data=atest,aes(x=Day,y=Wind) + geom_bar(stat="identity")
kk
ggplot(data=atest,aes(x=Day,y=Wind)) + geom_bar(stat="identity")
ggplot(data=atest,aes(x=Day,y=Wind)) + geom_bar(stat="identity",fill="steelblue")
ggplot(data=atest,aes(x=Day,y=Wind)) + geom_bar(stat="identity",fill="steelblue")
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\Slider")
runApp()
library(shiny)
runApp()
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\Tabsets")
runApp()
head(a)
?airpollution
?airquality
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\First")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(airquality[,airquality$Ozone],n=1)
head(airquality)
head(airquality$Ozone)
head(airquality$Ozone, n=1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\Tabsets")
runApp()
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\First")
runApp()
runApp()
runApp()
airquality[, Temp]
data.frame(airquality[, Temp])
data.frame(airquality[, airquality$Temp])
airquality[, airquality$Temp]
airquality[, 4]
data.frame(airquality[, 4])
data.frame(airquality[, Ozone])
data.frame(airquality[, "Ozone"])
runApp()
xaxis <- "Ozone"
data.frame(airquality[, xaxis])
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
?airquality
head(airquality,n=2)
library(ggplot2)
ggplot(airquality,aes(x=Month,y=Ozone))
ggplot(airquality,aes(x=Month,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality[,Month=5],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality[,Month==5],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality[,"Month"==5],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity")
airquality["Month==5"]
airquality["Month"==5]
airquality[,"Month"==5]
airquality[,"Month"=5]
airquality["Month"==5,Month]
airquality["Month"==5,"Month"]
lapply(class,airquality)
lapply(airquality,class)
airquality["Month"==5,]
airquality["Month"=5,]
ggplot(airquality[,"Month"==5],aes(x=Day,y=Ozone),fill=Month) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality,aes(x=Day,y=Ozone),fill=Month) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality,aes(x=Day,y=Ozone, fill=Month)) + geom_bar(position=position_dodge(), stat="identity")
ggplot(airquality,aes(x=Month,y=Ozone, fill=Month)) + geom_bar(position=position_dodge(), stat="identity")
airquality
airquality[,1]
airquality[,Ozone]
airquality[,"Ozone"]
airquality[Ozone=41]
airquality[Ozone==41]
airquality["Ozone"==41]
airquality[airquality$Ozone==41,]
airquality[airquality$Ozone=41,]
airquality[airquality$Month==5,]
View(a)
ggplot(airquality[airquality$Month==5,],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
runApp()
ggplot(airquality[airquality$Month==5,],aes(x=Day,y="Ozone")) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
ggplot(airquality[airquality$Month==5,],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
ggplot(airquality[airquality$Month=="5",],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
ggplot(airquality[airquality$Month=="9",],aes(x=Day,y=Ozone)) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(airquality[airquality$Month=="5",],aes_string(x="Day",y="Ozone"))
+ geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
ggplot(airquality[airquality$Month=="5",],aes_string(x="Day",y="Ozone")) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue")
runApp()
runApp()
runApp()
runApp()
runApp()
?airquality
runApp()
runApp()
runApp()
airquality
runApp()
runApp()
airquality
?airquality
runApp()
install.package("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("D:/DataScience/Git/Data_Products")
author("first_slidify")
slidify(index.Rmd)
setwd("D:/DataScience/Git/Data_Products/first_slidify")
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
slidify(inputFile = 'index.Rmd')
ggplot(airquality[airquality$Month==datax(),],aes_string(x="Day",y=datay())) + geom_bar(position=position_dodge(), stat="identity", fill="steelblue") + ggtitle(paste("Air quality factor ",datay(),"for New York city for the month of",input$xcol,"and year 1973"))
setwd("D:\\DataScience\\Git\\Data_Products\\Code\\First")
runApp()
setwd("D:\\DataScience\\Git\\Data_Products\\first_slidify")
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='anubhavsood', token='F02C645204536ADD080905444285FC69', secret='NnLYRNwfUp95VK19TEnTjAdFuu9dAmGp7sKiWVNy')
library(shinyapps)
shinyapps::deployApp('D:\\DataScience\\Git\\Data_Products\\Code\\First')
library(ggplot2)
library(shinyapps)
shinyapps::deployApp('D:\\DataScience\\Git\\Data_Products\\Code\\First')
library(shinyapps)
shinyapps::deployApp('D:\\DataScience\\Git\\Data_Products\\Code\\First')
shinyapps::setAccountInfo(name='anubhavsood', token='F02C645204536ADD080905444285FC69', secret='NnLYRNwfUp95VK19TEnTjAdFuu9dAmGp7sKiWVNy')
library(shinyapps)
shinyapps::deployApp('D:\\DataScience\\Git\\Data_Products\\Code\\First')
getwd()
library(shinyapps)
deployApp()
